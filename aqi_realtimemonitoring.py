# -*- coding: utf-8 -*-
"""AQI_RealTimeMonitoring

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/aqi-realtimemonitoring-b9a93dd1-ac51-4d44-8269-069d803cdb49.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20240406/auto/storage/goog4_request%26X-Goog-Date%3D20240406T181427Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3Dce4940d79a14c2badf01c11861a52694681741be142628b03269c1babfc35d1dff47ffcf369371f462fbd9de82763ca2c78c1e80878b3c0eb9edb0db33ebfe3a00bff1297c8f14660e2013c4794bd1db2539875aa97f4d3784ef629d6aa0539b0a9cb5e682af9a471d0b20dc48a71c5209eca1e69051da17c2a98aa1ecfcac47307d413d898de5a109ad279df65384ba6e8d739246c48d89bfd9d5b6eecc743cb6d17d82518c9d4a7841b5aed09cd28d9c522ffdbfabc85d12f3d67655855eda702a41887e0327d2a435e1727130252d81725e095d0b66cb73b84b3bf26fa9273d5678737573df268019e7e31e007b2351992de8ebfd7a859b188dbf08d69108
"""

from datetime import datetime
timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
print('timestamp in kaggle: ', timestamp)

"""Basically the timestamp in kaggle is different from ourlocal time. SO we can make changes to it.
[This usually happens because the platform's servers might be located in a different timezone than our own, or they might use a standardized timezone for consistency across users.]

So, change it to our local runtime using pytz

"""

import pytz
from datetime import datetime

# Set your local time zone
local_tz = pytz.timezone('Asia/Kolkata')

# Function to get the current timestamp in your local time zone
def get_local_timestamp():
    # Get the current timestamp in UTC
    utc_now = datetime.utcnow()

    # Convert to your local time zone
    local_now = utc_now.astimezone(local_tz)

    # Format the timestamp
    timestamp = local_now.strftime('%Y-%m-%d %H:%M:%S')
    return timestamp

import requests
import csv
from datetime import datetime
import time

# Replace with your OpenWeather API key
API_KEY = 'cf8900a7a494d0ec80016e6923d1cb12'

# API endpoint for current air pollution data
API_ENDPOINT = 'http://api.openweathermap.org/data/2.5/air_pollution'

# Dictionary of major city names and their coordinates
MAJOR_CITIES = {
    'New York': {'lat': 40.7128, 'lon': -74.0059},
    'Los Angeles': {'lat': 34.0522, 'lon': -118.2437},
    'Delhi':{'lat': 28.6100, 'lon': 77.2300},
    'Mumbai':{'lat': 19.0761, 'lon': 72.8775},
    'Kolkata':{'lat': 22.5675, 'lon': 88.37},
    'Bangalore':{'lat': 12.9789, 'lon': 77.5917},
    'Chennai':{'lat': 13.0825, 'lon': 80.275},
    'Hyderabad':{'lat': 17.3617, 'lon': 78.4747},
    'Pune':{'lat': 18.5203, 'lon': 73.8567},
    'Ahmedabad':{'lat': 23.0225, 'lon': 72.5714},
    'Lucknow':{'lat': 26.85, 'lon': 80.95},
    'Jaipur':{'lat': 26.85, 'lon': 75.8},
    'Kanpur':{'lat': 26.4499, 'lon': 80.3319},
    'Mirzapur':{'lat': 25.146, 'lon': 82.569},
    'Nagpur':{'lat': 21.1497, 'lon': 79.0806},
    'Vadodara':{'lat': 22.3, 'lon': 73.2},
    'Rajkot':{'lat': 22.3, 'lon': 70.7833},
    'Vishakhapatnam':{'lat': 17.7042, 'lon': 83.2978},
    'Indore':{'lat': 22.7167, 'lon': 75.8472},
    'Thane':{'lat': 19.1972, 'lon': 72.9722},
    'Bhopal':{'lat': 23.2599, 'lon': 77.4126},
    'Patna':{'lat': 25.594, 'lon': 85.1376},
    'Agra':{'lat': 27.18, 'lon': 78.02},
    'Madurai':{'lat': 9.9252, 'lon': 78.1198},
    'Jamshedpur':{'lat': 22.7925, 'lon': 86.1842},
    'Nasik':{'lat': 19.9975, 'lon': 73.7898},
    'Meerut':{'lat': 28.98, 'lon': 77.71},
    'Srinagar':{'lat': 34.09, 'lon': 74.79},
    'Varanasi':{'lat': 25.3189, 'lon': 83.0128},
    'Aurangabad':{'lat': 19.88, 'lon': 75.32},
    'Amritsar':{'lat': 31.64, 'lon': 74.86},
    'Ranchi':{'lat': 23.36, 'lon': 85.33},
    'Vijayawada':{'lat': 16.5193, 'lon': 80.6305},
    'Puducherry':{'lat': 11.9167, 'lon': 79.8167},
    'Shimla':{'lat': 31.1033, 'lon': 77.1722},
    'Thiruvananthapuram':{'lat': 8.60399000, 'lon': 76.9857400},
    'Ongole':{'lat': 15.50357000, 'lon': 80.04454000},
    'Anantapur':{'lat': 14.55000000, 'lon': 77.41667000},
    'Tripura':{'lat': 23.94084820, 'lon': 91.98815270},
    'Itanagar':{'lat':27.08694000 , 'lon':93.60987000 },
    'London': {'lat': 51.5074, 'lon': -0.1278},
    'Paris': {'lat': 48.8566, 'lon': 2.3522},
    'Berlin': {'lat': 52.5200, 'lon': 13.4050},
    'Tokyo': {'lat': 35.6895, 'lon': 139.6917},
    'Sydney': {'lat': -33.8688, 'lon': 151.2093},
    'Beijing': {'lat': 39.9042, 'lon': 116.4074},
    'Moscow': {'lat': 55.7558, 'lon': 37.6176},
    'Rome': {'lat': 41.9028, 'lon': 12.4964},
    'Dubai': {'lat': 25.2048, 'lon': 55.2708},
    'Singapore': {'lat': 1.3521, 'lon': 103.8198},
    'Hong Kong': {'lat': 22.3193, 'lon': 114.1694},
    'Istanbul': {'lat': 41.0082, 'lon': 28.9784},
    'Toronto': {'lat': 43.6532, 'lon': -79.3832},
    'Melbourne': {'lat': -37.8136, 'lon': 144.9631},
    'Mexico City': {'lat': 19.4326, 'lon': -99.1332},
    'Sao Paulo': {'lat': -23.5505, 'lon': -46.6333},
    'Cairo': {'lat': 30.0444, 'lon': 31.2357},
    'Lagos': {'lat': 6.5244, 'lon': 3.3792},
    'Bangkok': {'lat': 13.7563, 'lon': 100.5018},
    'Jakarta': {'lat': -6.2088, 'lon': 106.8456},
    'Buenos Aires': {'lat': -34.6037, 'lon': -58.3816},
    'Rio de Janeiro': {'lat': -22.9068, 'lon': -43.1729},
    'Lima': {'lat': -12.0464, 'lon': -77.0428},
    'Santiago': {'lat': -33.4489, 'lon': -70.6693},
    'Bogota': {'lat': 4.7110, 'lon': -74.0721},
    'Hanoi': {'lat': 21.0285, 'lon': 105.8542},
    'Cape Town': {'lat': -33.9249, 'lon': 18.4241},
    'Athens': {'lat': 37.9838, 'lon': 23.7275},
    'Amsterdam': {'lat': 52.3667, 'lon': 4.8945},
    'Vienna': {'lat': 48.2082, 'lon': 16.3738},
    'Brussels': {'lat': 50.8503, 'lon': 4.3517},
    'Dublin': {'lat': 53.3498, 'lon': -6.2603},
    'Copenhagen': {'lat': 55.6761, 'lon': 12.5683},
    'Stockholm': {'lat': 59.3293, 'lon': 18.0686},
    'Oslo': {'lat': 59.9139, 'lon': 10.7522},
    'Mexico City': {'lat': 19.4326, 'lon': -99.1332},
    'Sao Paulo': {'lat': -23.5505, 'lon': -46.6333},
    'Cairo': {'lat': 30.0444, 'lon': 31.2357},
    'Lagos': {'lat': 6.5244, 'lon': 3.3792},
    'Bangkok': {'lat': 13.7563, 'lon': 100.5018},
    'Jakarta': {'lat': -6.2088, 'lon': 106.8456},
    'Buenos Aires': {'lat': -34.6037, 'lon': -58.3816},
    'Rio de Janeiro': {'lat': -22.9068, 'lon': -43.1729},
    'Lima': {'lat': -12.0464, 'lon': -77.0428},
    'Santiago': {'lat': -33.4489, 'lon': -70.6693},
    'Bogota': {'lat': 4.7110, 'lon': -74.0721},
    'Tokyo': {'lat': 35.682839, 'lon': 139.759455},
    'Delhi': {'lat': 28.6139, 'lon': 77.2090},
    'Shanghai': {'lat': 31.2304, 'lon': 121.4737},
    'Dhaka': {'lat': 23.8103, 'lon': 90.4125},
    'Beijing': {'lat': 39.9042, 'lon': 116.4074},
    'Mumbai': {'lat': 19.0760, 'lon': 72.8777},
    'Istanbul': {'lat': 41.0082, 'lon': 28.9784},
    'Karachi': {'lat': 24.8607, 'lon': 67.0011},
    'Guangzhou': {'lat': 23.1291, 'lon': 113.2644},
    'Tianjin': {'lat': 39.0842, 'lon': 117.2007}
    # Add more cities as needed
}

# Function to fetch air quality data from the API
def fetch_air_quality_data(lat, lon):
    params = {
        'lat': lat,
        'lon': lon,
        'appid': API_KEY
    }
    response = requests.get(API_ENDPOINT, params=params)
    response.raise_for_status()  # Raise an exception for non-2xx status codes
    data = response.json()
    return data

# Function to write air quality data to a CSV file
def write_to_csv(data, location):
    timestamp = get_local_timestamp()
    aqi = data['list'][0]['main']['aqi']
    components = data['list'][0]['components']
    co = components.get('co', 'N/A')
    no2 = components.get('no2', 'N/A')
    o3 = components.get('o3', 'N/A')
    so2 = components.get('so2', 'N/A')
    pm2_5 = components.get('pm2_5', 'N/A')
    pm10 = components.get('pm10', 'N/A')

    row = [timestamp, location['lat'], location['lon'], aqi, co, no2, o3, so2, pm2_5, pm10]

    with open('air_quality_data.csv', 'a', newline='') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(row)

def fetch_and_store_data(location):
    data = fetch_air_quality_data(location['lat'], location['lon'])
    write_to_csv(data, location)
    print(f"Data written for {location['lat']}, {location['lon']}")

# Create the CSV file and write the header row
with open('air_quality_data.csv', 'w', newline='') as csvfile:
    writer = csv.writer(csvfile)
    header = ['Timestamp', 'Latitude', 'Longitude', 'AQI', 'CO', 'NO2', 'O3', 'SO2', 'PM2.5', 'PM10']
    writer.writerow(header)

# Prompt the user for input
print("Select an option:")
print("1. Enter coordinates")
print("2. Select a major city")
choice = input("Enter your choice (1 or 2): ")

if choice == '1':
    try:
        lat = float(input("Enter latitude: "))
        lon = float(input("Enter longitude: "))
        n = int(input("Enter the total number of rows of data you want in range(1, 43800): "))
        interval = int(input("Enter the time interval between two API calls (in seconds): "))
        for i in range(n):
            location = {'lat': lat, 'lon': lon}
            fetch_and_store_data(location)
            time.sleep(interval)
    except ValueError:
        print("Invalid input. Latitude and longitude must be numeric values.")
elif choice == '2':
    print("Major Cities:")
    for index, city in enumerate(MAJOR_CITIES.keys(), 1):
        print(f"{index}. {city}")
    city_choice = input("Enter the number corresponding to the city: ")
    try:
        city_index = int(city_choice)
        if 1 <= city_index <= len(MAJOR_CITIES):
            city_name = list(MAJOR_CITIES.keys())[city_index - 1]
            location = MAJOR_CITIES[city_name]
            n = int(input("Enter the total number of rows of data you want in range(1, 43800): "))
            interval = int(input("Enter the time interval between two API calls (in seconds): "))
            for i in range(n):
                fetch_and_store_data(location)
                time.sleep(interval)
        else:
            print("Invalid choice. Please enter a valid number.")
    except ValueError:
        print("Invalid input. Please enter a number.")
else:
    print("Invalid choice. Please enter '1' or '2'.")


# location = {'lat': 13.0825, 'lon': 80.275} #Enter a required location coordinates
# for i in range(100):
#     fetch_and_store_data(location)
#     time.sleep(3600)